void	draw_raycast(t_data *d)
{
	int color;
	draw_floor_celling(d);
	direction(d);
	//Position of the Player in d->p_y and p_x;
	if(d->map_utils->player_pos == 'N')
	{
		d->dir_x = 0, d->dir_y = -1;//initial direction vector = NORTH
		d->plane_x = 0.66, d->plane_y = 0;
	}
	if(d->map_utils->player_pos == 'S')
	{
		d->dir_x = 0, d->dir_y = 1;//initial direction vector = SOUTH
		d->plane_x = -0.66, d->plane_y = 0;
	}
	if(d->map_utils->player_pos == 'E')
	{
		d->dir_x = 1, d->dir_y = 0;//initial direction vector = EAST
		d->plane_x = 0, d->plane_y = 0.66;
	}
	if(d->map_utils->player_pos == 'W')
	{
		d->dir_x = -1, d->dir_y = 0;//initial direction vector = WEST
		d->plane_x = 0, d->plane_y = -0.66;
	}

/* Camera Plane: In addition to the direction, you need to define the camera plane.
The camera plane is like a flat surface that the player sees.
It's always perpendicular (at a right angle) to the direction the player is looking, but you can change how wide it is.
This width determines how much the player can see. In the code, planeX is set to 0 (horizontal direction),
and planeY is set to 0.66 (vertical direction). This creates a specific field of view (FOV) for the player,
which is similar to a flashlight beam. */
//-----------------------------------------------------------------------

	d->i = 0;
	while(d->i < WIDTH)
	{
		d->camera_x = 2 * d->i / (double)WIDTH - 1;
		d->raydir_x = d->dir_x + d->plane_x * d->camera_x;
		d->raydir_y = d->dir_y + d->plane_y * d->camera_x;

/* Here starts the actual raycasting. calculation for every vertical stripe.
The ray starts at the position of the player (posX, posY).

Imagine you're looking at a computer screen, and you want to know where on the screen you are currently focusing.
cameraX helps in this by assigning a value to each column of the screen. If cameraX is -1, you're looking at the far left side of the screen,
and if it's 1, you're looking at the far right side. If it's 0, you're looking straight ahead at the center.
So, in essence, cameraX helps the code understand where your character is aiming or looking within the game world, making it possible to
calculate the direction of rays for each column on the screen.

rayDirX and rayDirY represent the direction of the ray in the game world. They are calculated by combining the player's direction vector (dirX and dirY)
with a part of the plane vector (planeX and planeY) scaled by cameraX. This step determines where the ray is pointing in the game world.
*/

//----------------------------------------------------------------------

		d->mapx = (int)d->p_x;
		d->mapy = (int)d->p_y;
		if (d->raydir_x == 0)
			d->delta_dist_x = 1e30;
		else
			d->delta_dist_x = fabs(1 / d->raydir_x);
		if (d->raydir_y == 0)
			d->delta_dist_y = 1e30;
		else
			d->delta_dist_y = fabs(1 / d->raydir_y);
		d->hit = 0;

/* mapX and mapY represent the box or grid cell of the map that your character (or the ray) is currently inside.  

sideDistX and sideDistY are used to keep track of the distance from the current position
to the next vertical or horizontal grid boundary (side of a wall).

deltaDistX and deltaDistY represent the length of the ray that needs to be traveled to move from one grid boundary to the next.
These values are used to calculate how far the ray should move horizontally or vertically before reaching the next grid boundary.
The code checks if rayDirX or rayDirY is zero to avoid division by zero.
If rayDirX is indeed equal to zero (meaning the ray is traveling perfectly vertically), the code sets deltaDistX to a very large value, 1e30.
This effectively means that the ray will travel a virtually infinite distance horizontally before reaching the next grid boundary.
This is done to avoid division by zero, which would occur if rayDirX is zero.

perpWallDist will be used to store the final distance from the player to the nearest wall.
It's calculated based on the previous values

stepX and stepY determine the direction in which the ray should move horizontally and vertically.
They can have values of either +1 or -1, indicating whether the ray is moving to the right or left, or up or down.

hit is a flag variable that is initially set to 0, indicating that there has been no wall hit.
It will be used later to check if the ray has hit a wall.

side is used to determine whether the ray hit a north-south (NS == 1) wall or an east-west (EW == 0) wall.
It's initialized but will be set later based on the direction of the first wall hit.

*/
//----------------------------------------------------------------------
		if (d->raydir_x < 0)
		{
			d->stepx = -1;
			d->side_dist_x = (d->p_x - d->mapx) * d->delta_dist_x;
		}
		else
		{
			d->stepx = 1;
			d->side_dist_x = (d->mapx + 1.0 - d->p_x) * d->delta_dist_x;
		}
		if (d->raydir_y < 0)
		{
			d->stepy = -1;
			d->side_dist_y = (d->p_y - d->mapy) * d->delta_dist_y;
		}
		else
		{
			d->stepy = 1;
			d->side_dist_y = (d->mapy + 1.0 - d->p_y) * d->delta_dist_y;
		}

/* If rayDirX (the x-component of the ray's direction) is negative, it means the ray is pointing to the left in the game world.
	In this case, stepX is set to -1, indicating that the ray will move to the left.	
	sideDistX is calculated as the distance from the player's current x-position (posX) to the left side of the grid cell (mapX) multiplied by deltaDistX.
	This calculates how far the ray needs to travel horizontally to reach the left side of the grid cell.

	If rayDirX is not negative (i.e., it's positive or zero), it means the ray is pointing to the right in the game world.
    In this case, stepX is set to 1, indicating that the ray will move to the right.
    sideDistX is calculated as the distance from the right side of the grid cell (mapX + 1.0) to the player's current x-position (posX) multiplied by deltaDistX.
	This calculates how far the ray needs to travel horizontally to reach the right side of the grid cell.

*/
//----------------------------------------------------------------------------
		while (!d->hit)
		{
			if ( d->side_dist_x < d->side_dist_y)
			{
				d->side_dist_x += d->delta_dist_x;
				d->mapx += d->stepx;
				d->side = 0;
			}
			else
			{
				d->side_dist_y += d->delta_dist_y;
				d->mapy += d->stepy;
				d->side = 1;
			}
			if (d->map_utils->map[d->mapy][d->mapx] == '1')
				d->hit = 1;
		}

/*
In easy terms, this piece of code repeatedly moves the ray from one grid square to the next, either horizontally or vertically, depending on which boundary (side) is closer.
It keeps doing this until the ray hits a wall (as determined by the worldMap) or until it has explored all relevant grid squares along its path.
This process is essential for tracing the ray's path and finding where it intersects with walls in the game world.

*/
//-----------------------------------------------------------------------------------
		if (d->side == 0)
			d->perp_wall_dist = (d->side_dist_x - d->delta_dist_x);
		else
			d->perp_wall_dist = (d->side_dist_y - d->delta_dist_y);

/* depending on whether the ray hits a vertical or horizontal wall (d->side), this code calculates the distance from the player to the wall.
If d->side is 0 (indicating a vertical wall), it calculates perp_wall_dist as the difference between d->side_dist_x and d->delta_dist_x.
If d->side is 1 (indicating a horizontal wall), it calculates perp_wall_dist as the difference between d->side_dist_y and d->delta_dist_y. */
		if (d->perp_wall_dist)
			d->line_height = (int)(HEIGHT / d->perp_wall_dist);
		else
			d->line_height = HEIGHT;
/*line_height is determined by dividing the height of the screen (HEIGHT) by perp_wall_dist.
This represents how tall the wall should appear on the screen.
The closer the wall, the taller it appears. */
		d->draw_start = -d->line_height / 2 + HEIGHT / 2;
		if (d->draw_start < 0)
			d->draw_start = 0;
		d->draw_end = d->line_height / 2 + HEIGHT / 2;
/*draw_start is calculated as half of the screen height (HEIGHT) minus half of the line_height. This ensures that the wall is drawn from the center of the screen upward.
draw_end is calculated as half of the screen height plus half of the line_height. This ensures that the wall is drawn from the center of the screen downward.*/
		if (d->draw_end >= HEIGHT)
			d->draw_end = HEIGHT - 1;

/* if draw_start is less than 0, it's set to 0 to prevent drawing above the top of the screen.
If draw_end is greater than or equal to the screen height (HEIGHT), it's set to HEIGHT - 1 to prevent drawing below the bottom of the screen. */

		int j = d->draw_start;
		while (j < d->draw_end)
		{
			my_mlx_pixel_put(d, d->i, j, color);
			j++;
		}
		d->i++;
*/ This is where the program starts drawing the scenario pixel by pixel. It goes to the rigth texture and searches for the pixel color as well. The pixels are drawn to a aux image, which we will later put to the screen. */
	}
}
